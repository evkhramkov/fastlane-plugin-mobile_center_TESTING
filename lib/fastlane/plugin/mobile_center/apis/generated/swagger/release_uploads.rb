# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module swagger
  #
  # Microsoft Visual Studio Mobile Center API
  #
  class ReleaseUploads

    #
    # Creates and initializes a new instance of the ReleaseUploads class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [MobileCenterClient] reference to the MobileCenterClient
    attr_reader :client

    #
    # Commits or aborts the upload process for a release for the specified
    # application
    #
    # @param upload_id [String] The ID of the upload
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param status [Enum] The desired operation for the upload. Possible values
    # include: 'committed', 'aborted'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ReleaseUploadEndResponse] operation results.
    #
    def complete(upload_id, owner_name, app_name, status, custom_headers = nil)
      response = complete_async(upload_id, owner_name, app_name, status, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Commits or aborts the upload process for a release for the specified
    # application
    #
    # @param upload_id [String] The ID of the upload
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param status [Enum] The desired operation for the upload. Possible values
    # include: 'committed', 'aborted'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def complete_with_http_info(upload_id, owner_name, app_name, status, custom_headers = nil)
      complete_async(upload_id, owner_name, app_name, status, custom_headers).value!
    end

    #
    # Commits or aborts the upload process for a release for the specified
    # application
    #
    # @param upload_id [String] The ID of the upload
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param status [Enum] The desired operation for the upload. Possible values
    # include: 'committed', 'aborted'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def complete_async(upload_id, owner_name, app_name, status, custom_headers = nil)
      fail ArgumentError, 'upload_id is nil' if upload_id.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?
      fail ArgumentError, 'status is nil' if status.nil?

      body = ReleaseUploadEndRequest.new
      unless status.nil?
        body.status = status
      end

      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = swagger::Models::ReleaseUploadEndRequest.mapper()
      request_content = @client.serialize(request_mapper,  body, 'body')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v0.1/apps/{owner_name}/{app_name}/release_uploads/{upload_id}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'upload_id' => upload_id,'owner_name' => owner_name,'app_name' => app_name},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = swagger::Models::ReleaseUploadEndResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Begins the upload process for a new release for the specified application.
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ReleaseUploadBeginResponse] operation results.
    #
    def create(owner_name, app_name, custom_headers = nil)
      response = create_async(owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Begins the upload process for a new release for the specified application.
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def create_with_http_info(owner_name, app_name, custom_headers = nil)
      create_async(owner_name, app_name, custom_headers).value!
    end

    #
    # Begins the upload process for a new release for the specified application.
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_async(owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/release_uploads'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = swagger::Models::ReleaseUploadBeginResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end

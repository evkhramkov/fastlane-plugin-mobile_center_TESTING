# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module MobileCenterApi
  #
  # Microsoft Visual Studio Mobile Center API
  #
  class Builds

    #
    # Creates and initializes a new instance of the Builds class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [MobileCenterClient] reference to the MobileCenterClient
    attr_reader :client

    #
    # Gets the Xcode versions available to this app
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def list_xcode_versions(owner_name, app_name, custom_headers = nil)
      response = list_xcode_versions_async(owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the Xcode versions available to this app
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def list_xcode_versions_with_http_info(owner_name, app_name, custom_headers = nil)
      list_xcode_versions_async(owner_name, app_name, custom_headers).value!
    end

    #
    # Gets the Xcode versions available to this app
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_xcode_versions_async(owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/xcode_versions'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'XcodeVersionElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'XcodeVersion'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 400
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterApi::Models::ValidationErrorResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Get the build log
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BuildLog] operation results.
    #
    def get_log(build_id, owner_name, app_name, custom_headers = nil)
      response = get_log_async(build_id, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Get the build log
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_log_with_http_info(build_id, owner_name, app_name, custom_headers = nil)
      get_log_async(build_id, owner_name, app_name, custom_headers).value!
    end

    #
    # Get the build log
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_log_async(build_id, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'build_id is nil' if build_id.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/logs'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'build_id' => build_id,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterApi::Models::BuildLog.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the download URI
    #
    # @param build_id [Integer] The build ID
    # @param download_type [Enum] The download type. Possible values include:
    # 'build', 'symbols', 'logs', 'test-report-preview'
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DownloadContainer] operation results.
    #
    def get_download_uri(build_id, download_type, owner_name, app_name, custom_headers = nil)
      response = get_download_uri_async(build_id, download_type, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the download URI
    #
    # @param build_id [Integer] The build ID
    # @param download_type [Enum] The download type. Possible values include:
    # 'build', 'symbols', 'logs', 'test-report-preview'
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_download_uri_with_http_info(build_id, download_type, owner_name, app_name, custom_headers = nil)
      get_download_uri_async(build_id, download_type, owner_name, app_name, custom_headers).value!
    end

    #
    # Gets the download URI
    #
    # @param build_id [Integer] The build ID
    # @param download_type [Enum] The download type. Possible values include:
    # 'build', 'symbols', 'logs', 'test-report-preview'
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_download_uri_async(build_id, download_type, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'build_id is nil' if build_id.nil?
      fail ArgumentError, 'download_type is nil' if download_type.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/downloads/{download_type}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'build_id' => build_id,'download_type' => download_type,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterApi::Models::DownloadContainer.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Distribute a build
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param distribution_group_id [String] The distribution group ID
    # @param release_notes [String] The release notes
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [DistributionResponse] operation results.
    #
    def distribute_method(build_id, owner_name, app_name, distribution_group_id, release_notes = nil, custom_headers = nil)
      response = distribute_method_async(build_id, owner_name, app_name, distribution_group_id, release_notes, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Distribute a build
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param distribution_group_id [String] The distribution group ID
    # @param release_notes [String] The release notes
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def distribute_method_with_http_info(build_id, owner_name, app_name, distribution_group_id, release_notes = nil, custom_headers = nil)
      distribute_method_async(build_id, owner_name, app_name, distribution_group_id, release_notes, custom_headers).value!
    end

    #
    # Distribute a build
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param distribution_group_id [String] The distribution group ID
    # @param release_notes [String] The release notes
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def distribute_method_async(build_id, owner_name, app_name, distribution_group_id, release_notes = nil, custom_headers = nil)
      fail ArgumentError, 'build_id is nil' if build_id.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?
      fail ArgumentError, 'distribution_group_id is nil' if distribution_group_id.nil?

      distribute_info = DistributionRequest.new
      unless distribution_group_id.nil? && release_notes.nil?
        distribute_info.distribution_group_id = distribution_group_id
        distribute_info.release_notes = release_notes
      end

      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = MobileCenterApi::Models::DistributionRequest.mapper()
      request_content = @client.serialize(request_mapper,  distribute_info, 'distribute_info')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v0.1/apps/{owner_name}/{app_name}/builds/{build_id}/distribute'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'build_id' => build_id,'owner_name' => owner_name,'app_name' => app_name},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterApi::Models::DistributionResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns the build detail for the given build ID
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Build] operation results.
    #
    def get(build_id, owner_name, app_name, custom_headers = nil)
      response = get_async(build_id, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns the build detail for the given build ID
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_with_http_info(build_id, owner_name, app_name, custom_headers = nil)
      get_async(build_id, owner_name, app_name, custom_headers).value!
    end

    #
    # Returns the build detail for the given build ID
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_async(build_id, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'build_id is nil' if build_id.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/builds/{build_id}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'build_id' => build_id,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterApi::Models::Build.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Cancels a build
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param status [Enum] The build status; used to cancel builds. Possible values
    # include: 'cancelling'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Build] operation results.
    #
    def update(build_id, owner_name, app_name, status = nil, custom_headers = nil)
      response = update_async(build_id, owner_name, app_name, status, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Cancels a build
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param status [Enum] The build status; used to cancel builds. Possible values
    # include: 'cancelling'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def update_with_http_info(build_id, owner_name, app_name, status = nil, custom_headers = nil)
      update_async(build_id, owner_name, app_name, status, custom_headers).value!
    end

    #
    # Cancels a build
    #
    # @param build_id [Integer] The build ID
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param status [Enum] The build status; used to cancel builds. Possible values
    # include: 'cancelling'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_async(build_id, owner_name, app_name, status = nil, custom_headers = nil)
      fail ArgumentError, 'build_id is nil' if build_id.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?

      properties = BuildPatch.new
      unless status.nil?
        properties.status = status
      end

      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = MobileCenterApi::Models::BuildPatch.mapper()
      request_content = @client.serialize(request_mapper,  properties, 'properties')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v0.1/apps/{owner_name}/{app_name}/builds/{build_id}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'build_id' => build_id,'owner_name' => owner_name,'app_name' => app_name},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:patch, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterApi::Models::Build.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Application specific build service status
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BuildServiceStatus] operation results.
    #
    def get_status_by_app_id(owner_name, app_name, custom_headers = nil)
      response = get_status_by_app_id_async(owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Application specific build service status
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_status_by_app_id_with_http_info(owner_name, app_name, custom_headers = nil)
      get_status_by_app_id_async(owner_name, app_name, custom_headers).value!
    end

    #
    # Application specific build service status
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_status_by_app_id_async(owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/build_service_status'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterApi::Models::BuildServiceStatus.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns the projects in the repository for the branch, for all toolsets
    #
    # @param branch [String] The branch name
    # @param os [Enum] The desired OS for the project scan; normally the same as
    # the app OS. Possible values include: 'iOS', 'Android', 'Windows'
    # @param platform [Enum] The desired platform for the project scan. Possible
    # values include: 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java', 'UWP'
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ToolsetProjects] operation results.
    #
    def list_toolset_projects(branch, os, platform, owner_name, app_name, custom_headers = nil)
      response = list_toolset_projects_async(branch, os, platform, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns the projects in the repository for the branch, for all toolsets
    #
    # @param branch [String] The branch name
    # @param os [Enum] The desired OS for the project scan; normally the same as
    # the app OS. Possible values include: 'iOS', 'Android', 'Windows'
    # @param platform [Enum] The desired platform for the project scan. Possible
    # values include: 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java', 'UWP'
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def list_toolset_projects_with_http_info(branch, os, platform, owner_name, app_name, custom_headers = nil)
      list_toolset_projects_async(branch, os, platform, owner_name, app_name, custom_headers).value!
    end

    #
    # Returns the projects in the repository for the branch, for all toolsets
    #
    # @param branch [String] The branch name
    # @param os [Enum] The desired OS for the project scan; normally the same as
    # the app OS. Possible values include: 'iOS', 'Android', 'Windows'
    # @param platform [Enum] The desired platform for the project scan. Possible
    # values include: 'Objective-C-Swift', 'React-Native', 'Xamarin', 'Java', 'UWP'
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_toolset_projects_async(branch, os, platform, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'branch is nil' if branch.nil?
      fail ArgumentError, 'os is nil' if os.nil?
      fail ArgumentError, 'platform is nil' if platform.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/branches/{branch}/toolset_projects'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'branch' => branch,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'os' => os,'platform' => platform},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterApi::Models::ToolsetProjects.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns the list of builds for the branch
    #
    # @param branch [String] The branch name
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_by_branch(branch, owner_name, app_name, custom_headers = nil)
      response = list_by_branch_async(branch, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns the list of builds for the branch
    #
    # @param branch [String] The branch name
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def list_by_branch_with_http_info(branch, owner_name, app_name, custom_headers = nil)
      list_by_branch_async(branch, owner_name, app_name, custom_headers).value!
    end

    #
    # Returns the list of builds for the branch
    #
    # @param branch [String] The branch name
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_branch_async(branch, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'branch is nil' if branch.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'branch' => branch,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'BuildElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'Build'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Create a build
    #
    # @param branch [String] The branch name
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param source_version [String] Version to build
    # @param debug [Boolean] Run build in debug mode
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Build] operation results.
    #
    def queue(branch, owner_name, app_name, source_version = nil, debug = nil, custom_headers = nil)
      response = queue_async(branch, owner_name, app_name, source_version, debug, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Create a build
    #
    # @param branch [String] The branch name
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param source_version [String] Version to build
    # @param debug [Boolean] Run build in debug mode
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def queue_with_http_info(branch, owner_name, app_name, source_version = nil, debug = nil, custom_headers = nil)
      queue_async(branch, owner_name, app_name, source_version, debug, custom_headers).value!
    end

    #
    # Create a build
    #
    # @param branch [String] The branch name
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param source_version [String] Version to build
    # @param debug [Boolean] Run build in debug mode
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def queue_async(branch, owner_name, app_name, source_version = nil, debug = nil, custom_headers = nil)
      fail ArgumentError, 'branch is nil' if branch.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?

      params = nil
      unless source_version.nil? && debug.nil?
        params = BuildParams.new
        params.source_version = source_version
        params.debug = debug
      end

      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = MobileCenterApi::Models::BuildParams.mapper()
      request_content = @client.serialize(request_mapper,  params, 'params')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v0.1/apps/{owner_name}/{app_name}/branches/{branch}/builds'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'branch' => branch,'owner_name' => owner_name,'app_name' => app_name},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterApi::Models::Build.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns the list of Git branches for this application
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def list_branches(owner_name, app_name, custom_headers = nil)
      response = list_branches_async(owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns the list of Git branches for this application
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def list_branches_with_http_info(owner_name, app_name, custom_headers = nil)
      list_branches_async(owner_name, app_name, custom_headers).value!
    end

    #
    # Returns the list of Git branches for this application
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_branches_async(owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/branches'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'BranchStatusElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'BranchStatus'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 400
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterApi::Models::ValidationErrorResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end

# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Swagger
  module Models
    #
    # Test Cloud File Hash Response

    # Response message for single uploaded file hash
    #
    class TestCloudFileHashResponse
      # @return [Enum] Type of the file. Possible values include: 'dsym-file',
      # 'app-file', 'test-file'
      attr_accessor :file_type

      # @return [String] SHA256 hash of the file
      attr_accessor :checksum

      # @return [String] Relative path of the file
      attr_accessor :relative_path

      # @return [TestCloudHashUploadStatus] Status of the upload
      attr_accessor :upload_status


      #
      # Mapper for TestCloudFileHashResponse class as Ruby Hash.
      # This will be used for serialization/deserialization.
      #
      def self.mapper()
        {
          required: false,
          serialized_name: 'TestCloudFileHashResponse',
          type: {
            name: 'Composite',
            class_name: 'TestCloudFileHashResponse',
            model_properties: {
              file_type: {
                required: true,
                serialized_name: 'fileType',
                type: {
                  name: 'String'
                }
              },
              checksum: {
                required: true,
                serialized_name: 'checksum',
                type: {
                  name: 'String'
                }
              },
              relative_path: {
                required: false,
                serialized_name: 'relativePath',
                type: {
                  name: 'String'
                }
              },
              upload_status: {
                required: true,
                serialized_name: 'uploadStatus',
                type: {
                  name: 'Composite',
                  class_name: 'TestCloudHashUploadStatus'
                }
              }
            }
          }
        }
      end
    end
  end
end

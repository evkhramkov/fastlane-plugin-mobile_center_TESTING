# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Swagger
  #
  # Microsoft Visual Studio Mobile Center API
  #
  class Commits

    #
    # Creates and initializes a new instance of the Commits class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [MobileCenterClient] reference to the MobileCenterClient
    attr_reader :client

    #
    # Returns commit information for a batch of shas. (Deprecated. Use
    # /apps/{app_id}/commits/batch instead with query string hashes)
    #
    # @param sha_collection [String] A collection of commit SHAs comma-delimited
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param form [Enum] The selected form of the object. Possible values include:
    # 'lite', 'full'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def deprecated_list_by_sha(sha_collection, owner_name, app_name, form = nil, custom_headers = nil)
      response = deprecated_list_by_sha_async(sha_collection, owner_name, app_name, form, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns commit information for a batch of shas. (Deprecated. Use
    # /apps/{app_id}/commits/batch instead with query string hashes)
    #
    # @param sha_collection [String] A collection of commit SHAs comma-delimited
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param form [Enum] The selected form of the object. Possible values include:
    # 'lite', 'full'
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def deprecated_list_by_sha_with_http_info(sha_collection, owner_name, app_name, form = nil, custom_headers = nil)
      deprecated_list_by_sha_async(sha_collection, owner_name, app_name, form, custom_headers).value!
    end

    #
    # Returns commit information for a batch of shas. (Deprecated. Use
    # /apps/{app_id}/commits/batch instead with query string hashes)
    #
    # @param sha_collection [String] A collection of commit SHAs comma-delimited
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param form [Enum] The selected form of the object. Possible values include:
    # 'lite', 'full'
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def deprecated_list_by_sha_async(sha_collection, owner_name, app_name, form = nil, custom_headers = nil)
      fail ArgumentError, 'sha_collection is nil' if sha_collection.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/commits/batch/{sha_collection}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          skip_encoding_path_params: {'sha_collection' => sha_collection},
          query_params: {'form' => form},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'CommitDetailsElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'CommitDetails'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns commit information for a batch of shas
    #
    # @param hashes [Array<String>] A collection of commit SHAs comma-delimited
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def list_by_sha_list(hashes, owner_name, app_name, custom_headers = nil)
      response = list_by_sha_list_async(hashes, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns commit information for a batch of shas
    #
    # @param hashes [Array<String>] A collection of commit SHAs comma-delimited
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def list_by_sha_list_with_http_info(hashes, owner_name, app_name, custom_headers = nil)
      list_by_sha_list_async(hashes, owner_name, app_name, custom_headers).value!
    end

    #
    # Returns commit information for a batch of shas
    #
    # @param hashes [Array<String>] A collection of commit SHAs comma-delimited
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def list_by_sha_list_async(hashes, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'hashes is nil' if hashes.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/commits/batch'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'hashes' => hashes.nil? ? nil : hashes.join(',')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'CommitDetailsElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'CommitDetails'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end

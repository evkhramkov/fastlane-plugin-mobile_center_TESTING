# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Swagger
  #
  # Microsoft Visual Studio Mobile Center API
  #
  class Tables

    #
    # Creates and initializes a new instance of the Tables class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [MobileCenterClient] reference to the MobileCenterClient
    attr_reader :client

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param id [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get_table_row(subscription_id, table_name, id, owner_name, app_name, custom_headers = nil)
      response = get_table_row_async(subscription_id, table_name, id, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param id [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_table_row_with_http_info(subscription_id, table_name, id, owner_name, app_name, custom_headers = nil)
      get_table_row_async(subscription_id, table_name, id, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param id [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_table_row_async(subscription_id, table_name, id, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'id is nil' if id.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/data/{id}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'id' => id,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param id [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param permanent [Boolean]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def delete_table_row(subscription_id, table_name, id, owner_name, app_name, permanent = nil, custom_headers = nil)
      response = delete_table_row_async(subscription_id, table_name, id, owner_name, app_name, permanent, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param id [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param permanent [Boolean]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete_table_row_with_http_info(subscription_id, table_name, id, owner_name, app_name, permanent = nil, custom_headers = nil)
      delete_table_row_async(subscription_id, table_name, id, owner_name, app_name, permanent, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param id [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param permanent [Boolean]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_table_row_async(subscription_id, table_name, id, owner_name, app_name, permanent = nil, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'id is nil' if id.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/data/{id}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'id' => id,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'permanent' => permanent},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param skip [Integer]
    # @param take [Integer]
    # @param sort [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get_table_data(subscription_id, table_name, owner_name, app_name, skip = nil, take = nil, sort = nil, custom_headers = nil)
      response = get_table_data_async(subscription_id, table_name, owner_name, app_name, skip, take, sort, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param skip [Integer]
    # @param take [Integer]
    # @param sort [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_table_data_with_http_info(subscription_id, table_name, owner_name, app_name, skip = nil, take = nil, sort = nil, custom_headers = nil)
      get_table_data_async(subscription_id, table_name, owner_name, app_name, skip, take, sort, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param skip [Integer]
    # @param take [Integer]
    # @param sort [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_table_data_async(subscription_id, table_name, owner_name, app_name, skip = nil, take = nil, sort = nil, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/data'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'skip' => skip,'take' => take,'sort' => sort},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param csv_data [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def import_table_data(subscription_id, table_name, owner_name, app_name, csv_data = nil, custom_headers = nil)
      response = import_table_data_async(subscription_id, table_name, owner_name, app_name, csv_data, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param csv_data [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def import_table_data_with_http_info(subscription_id, table_name, owner_name, app_name, csv_data = nil, custom_headers = nil)
      import_table_data_async(subscription_id, table_name, owner_name, app_name, csv_data, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param csv_data [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def import_table_data_async(subscription_id, table_name, owner_name, app_name, csv_data = nil, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?

      import = ImportDataContainer.new
      unless csv_data.nil?
        import.csv_data = csv_data
      end

      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Swagger::Models::ImportDataContainer.mapper()
      request_content = @client.serialize(request_mapper,  import, 'import')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/data'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'owner_name' => owner_name,'app_name' => app_name},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def clear_table_data(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      response = clear_table_data_async(subscription_id, table_name, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def clear_table_data_with_http_info(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      clear_table_data_async(subscription_id, table_name, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def clear_table_data_async(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/data'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get_column(subscription_id, table_name, column_name, owner_name, app_name, custom_headers = nil)
      response = get_column_async(subscription_id, table_name, column_name, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_column_with_http_info(subscription_id, table_name, column_name, owner_name, app_name, custom_headers = nil)
      get_column_async(subscription_id, table_name, column_name, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_column_async(subscription_id, table_name, column_name, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'column_name is nil' if column_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/columns/{columnName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'columnName' => column_name,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column_name [String]
    # @param column [TableColumn]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def update_column(subscription_id, table_name, column_name, column, owner_name, app_name, custom_headers = nil)
      response = update_column_async(subscription_id, table_name, column_name, column, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column_name [String]
    # @param column [TableColumn]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def update_column_with_http_info(subscription_id, table_name, column_name, column, owner_name, app_name, custom_headers = nil)
      update_column_async(subscription_id, table_name, column_name, column, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column_name [String]
    # @param column [TableColumn]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_column_async(subscription_id, table_name, column_name, column, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'column_name is nil' if column_name.nil?
      fail ArgumentError, 'column is nil' if column.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Swagger::Models::TableColumn.mapper()
      request_content = @client.serialize(request_mapper,  column, 'column')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/columns/{columnName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'columnName' => column_name,'owner_name' => owner_name,'app_name' => app_name},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def delete_column(subscription_id, table_name, column_name, owner_name, app_name, custom_headers = nil)
      response = delete_column_async(subscription_id, table_name, column_name, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete_column_with_http_info(subscription_id, table_name, column_name, owner_name, app_name, custom_headers = nil)
      delete_column_async(subscription_id, table_name, column_name, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_column_async(subscription_id, table_name, column_name, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'column_name is nil' if column_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/columns/{columnName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'columnName' => column_name,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get_column_list(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      response = get_column_list_async(subscription_id, table_name, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_column_list_with_http_info(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      get_column_list_async(subscription_id, table_name, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_column_list_async(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/columns'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column [TableColumn]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def update_column_list(subscription_id, table_name, column, owner_name, app_name, custom_headers = nil)
      response = update_column_list_async(subscription_id, table_name, column, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column [TableColumn]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def update_column_list_with_http_info(subscription_id, table_name, column, owner_name, app_name, custom_headers = nil)
      update_column_list_async(subscription_id, table_name, column, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param column [TableColumn]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_column_list_async(subscription_id, table_name, column, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'column is nil' if column.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Swagger::Models::TableColumn.mapper()
      request_content = @client.serialize(request_mapper,  column, 'column')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}/columns'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'owner_name' => owner_name,'app_name' => app_name},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get_table(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      response = get_table_async(subscription_id, table_name, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_table_with_http_info(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      get_table_async(subscription_id, table_name, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_table_async(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param table [Table]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def update_table(subscription_id, table_name, table, owner_name, app_name, custom_headers = nil)
      response = update_table_async(subscription_id, table_name, table, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param table [Table]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def update_table_with_http_info(subscription_id, table_name, table, owner_name, app_name, custom_headers = nil)
      update_table_async(subscription_id, table_name, table, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param table [Table]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_table_async(subscription_id, table_name, table, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'table is nil' if table.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Swagger::Models::Table.mapper()
      request_content = @client.serialize(request_mapper,  table, 'table')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'owner_name' => owner_name,'app_name' => app_name},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def delete_table(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      response = delete_table_async(subscription_id, table_name, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete_table_with_http_info(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      delete_table_async(subscription_id, table_name, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table_name [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_table_async(subscription_id, table_name, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table_name is nil' if table_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables/{tableName}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'tableName' => table_name,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get_table_list(subscription_id, owner_name, app_name, custom_headers = nil)
      response = get_table_list_async(subscription_id, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_table_list_with_http_info(subscription_id, owner_name, app_name, custom_headers = nil)
      get_table_list_async(subscription_id, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_table_list_async(subscription_id, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # @param subscription_id [String]
    # @param table [Table]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def create_table(subscription_id, table, owner_name, app_name, custom_headers = nil)
      response = create_table_async(subscription_id, table, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # @param subscription_id [String]
    # @param table [Table]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def create_table_with_http_info(subscription_id, table, owner_name, app_name, custom_headers = nil)
      create_table_async(subscription_id, table, owner_name, app_name, custom_headers).value!
    end

    #
    # @param subscription_id [String]
    # @param table [Table]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_table_async(subscription_id, table, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'subscription_id is nil' if subscription_id.nil?
      fail ArgumentError, 'table is nil' if table.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = Swagger::Models::Table.mapper()
      request_content = @client.serialize(request_mapper,  table, 'table')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v0.1/apps/{owner_name}/{app_name}/subscriptions/{subscription_id}/tables'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'subscription_id' => subscription_id,'owner_name' => owner_name,'app_name' => app_name},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end

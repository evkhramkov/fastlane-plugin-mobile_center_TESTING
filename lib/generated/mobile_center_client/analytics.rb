# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module MobileCenterClient
  #
  # Microsoft Visual Studio Mobile Center API
  #
  class Analytics

    #
    # Creates and initializes a new instance of the Analytics class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [MobileCenterClient] reference to the MobileCenterClient
    attr_reader :client

    #
    # Count of active versions in the time range ordered by version.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Versions] operation results.
    #
    def versions_method(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      response = versions_method_async(start, owner_name, app_name, end_parameter, count, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Count of active versions in the time range ordered by version.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def versions_method_with_http_info(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      versions_method_async(start, owner_name, app_name, end_parameter, count, versions, custom_headers).value!
    end

    #
    # Count of active versions in the time range ordered by version.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def versions_method_async(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/versions'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'count' => count,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::Versions.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Count of sessions per device in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param interval [String] Size of interval in ISO 8601 duration format.
    # (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1
    # week (P1W), and 30 days (P30D).
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SessionsPerDevice] operation results.
    #
    def per_device_counts(start, interval, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      response = per_device_counts_async(start, interval, owner_name, app_name, end_parameter, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Count of sessions per device in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param interval [String] Size of interval in ISO 8601 duration format.
    # (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1
    # week (P1W), and 30 days (P30D).
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def per_device_counts_with_http_info(start, interval, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      per_device_counts_async(start, interval, owner_name, app_name, end_parameter, versions, custom_headers).value!
    end

    #
    # Count of sessions per device in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param interval [String] Size of interval in ISO 8601 duration format.
    # (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1
    # week (P1W), and 30 days (P30D).
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def per_device_counts_async(start, interval, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'interval is nil' if interval.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/sessions_per_device'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'interval' => interval,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::SessionsPerDevice.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets session duration .
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SessionDurationsDistribution] operation results.
    #
    def session_durations_distribution_method(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      response = session_durations_distribution_method_async(start, owner_name, app_name, end_parameter, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets session duration .
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def session_durations_distribution_method_with_http_info(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      session_durations_distribution_method_async(start, owner_name, app_name, end_parameter, versions, custom_headers).value!
    end

    #
    # Gets session duration .
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def session_durations_distribution_method_async(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/session_durations_distribution'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::SessionDurationsDistribution.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Count of sessions in the time range.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param interval [String] Size of interval in ISO 8601 duration format.
    # (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1
    # week (P1W), and 30 days (P30D).
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SessionCounts] operation results.
    #
    def session_counts_method(start, interval, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      response = session_counts_method_async(start, interval, owner_name, app_name, end_parameter, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Count of sessions in the time range.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param interval [String] Size of interval in ISO 8601 duration format.
    # (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1
    # week (P1W), and 30 days (P30D).
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def session_counts_method_with_http_info(start, interval, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      session_counts_method_async(start, interval, owner_name, app_name, end_parameter, versions, custom_headers).value!
    end

    #
    # Count of sessions in the time range.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param interval [String] Size of interval in ISO 8601 duration format.
    # (PnYnMnDTnHnMnS|PnW|P<date>T<time>). The valid durations are 1 day (P1D), 1
    # week (P1W), and 30 days (P30D).
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def session_counts_method_async(start, interval, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'interval is nil' if interval.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/session_counts'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'interval' => interval,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::SessionCounts.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Places in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Places] operation results.
    #
    def place_counts(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      response = place_counts_async(start, owner_name, app_name, end_parameter, count, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Places in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def place_counts_with_http_info(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      place_counts_async(start, owner_name, app_name, end_parameter, count, versions, custom_headers).value!
    end

    #
    # Places in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def place_counts_async(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/places'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'count' => count,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::Places.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # OSes in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [OSes] operation results.
    #
    def operating_system_counts(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      response = operating_system_counts_async(start, owner_name, app_name, end_parameter, count, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # OSes in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def operating_system_counts_with_http_info(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      operating_system_counts_async(start, owner_name, app_name, end_parameter, count, versions, custom_headers).value!
    end

    #
    # OSes in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def operating_system_counts_async(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/oses'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'count' => count,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::OSes.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # models in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [AnalyticsModels] operation results.
    #
    def model_counts(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      response = model_counts_async(start, owner_name, app_name, end_parameter, count, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # models in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def model_counts_with_http_info(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      model_counts_async(start, owner_name, app_name, end_parameter, count, versions, custom_headers).value!
    end

    #
    # models in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def model_counts_async(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/models'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'count' => count,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::AnalyticsModels.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Logs received between the specified start time and the current time. The API
    # will return a maximum of 100 logs per call.
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param start [DateTime] Start date time in data in ISO 8601 date time format.
    # It must be within the current day in the UTC timezone. The default value is
    # the start time of the current day in UTC timezone.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [LogContainer] operation results.
    #
    def log_flow(owner_name, app_name, start = nil, custom_headers = nil)
      response = log_flow_async(owner_name, app_name, start, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Logs received between the specified start time and the current time. The API
    # will return a maximum of 100 logs per call.
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param start [DateTime] Start date time in data in ISO 8601 date time format.
    # It must be within the current day in the UTC timezone. The default value is
    # the start time of the current day in UTC timezone.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def log_flow_with_http_info(owner_name, app_name, start = nil, custom_headers = nil)
      log_flow_async(owner_name, app_name, start, custom_headers).value!
    end

    #
    # Logs received between the specified start time and the current time. The API
    # will return a maximum of 100 logs per call.
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param start [DateTime] Start date time in data in ISO 8601 date time format.
    # It must be within the current day in the UTC timezone. The default value is
    # the start time of the current day in UTC timezone.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def log_flow_async(owner_name, app_name, start = nil, custom_headers = nil)
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/log_flow'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::LogContainer.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # languages in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Languages] operation results.
    #
    def language_counts(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      response = language_counts_async(start, owner_name, app_name, end_parameter, count, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # languages in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def language_counts_with_http_info(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      language_counts_async(start, owner_name, app_name, end_parameter, count, versions, custom_headers).value!
    end

    #
    # languages in the time range
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param count [Integer] The number of results to return
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def language_counts_async(start, owner_name, app_name, end_parameter = nil, count = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/languages'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'count' => count,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::Languages.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Event properties value counts during the time range in descending order.
    # Limited up to 5 values.
    #
    # @param event_name [String] The id of the event
    # @param event_property_name [String] The id of the event property
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param count [Integer] The number of property values to return
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventPropertyValues] operation results.
    #
    def event_property_counts(event_name, event_property_name, start, owner_name, app_name, end_parameter = nil, versions = nil, count = 5, custom_headers = nil)
      response = event_property_counts_async(event_name, event_property_name, start, owner_name, app_name, end_parameter, versions, count, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Event properties value counts during the time range in descending order.
    # Limited up to 5 values.
    #
    # @param event_name [String] The id of the event
    # @param event_property_name [String] The id of the event property
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param count [Integer] The number of property values to return
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def event_property_counts_with_http_info(event_name, event_property_name, start, owner_name, app_name, end_parameter = nil, versions = nil, count = 5, custom_headers = nil)
      event_property_counts_async(event_name, event_property_name, start, owner_name, app_name, end_parameter, versions, count, custom_headers).value!
    end

    #
    # Event properties value counts during the time range in descending order.
    # Limited up to 5 values.
    #
    # @param event_name [String] The id of the event
    # @param event_property_name [String] The id of the event property
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param count [Integer] The number of property values to return
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def event_property_counts_async(event_name, event_property_name, start, owner_name, app_name, end_parameter = nil, versions = nil, count = 5, custom_headers = nil)
      fail ArgumentError, 'event_name is nil' if event_name.nil?
      fail ArgumentError, 'event_property_name is nil' if event_property_name.nil?
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties/{event_property_name}/counts'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'event_name' => event_name,'event_property_name' => event_property_name,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'versions' => versions.nil? ? nil : versions.join('|'),'count' => count},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::EventPropertyValues.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Event properties.  Up to the first 5 received properties.
    #
    # @param event_name [String] The id of the event
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventProperties] operation results.
    #
    def event_properties_method(event_name, owner_name, app_name, custom_headers = nil)
      response = event_properties_method_async(event_name, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Event properties.  Up to the first 5 received properties.
    #
    # @param event_name [String] The id of the event
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def event_properties_method_with_http_info(event_name, owner_name, app_name, custom_headers = nil)
      event_properties_method_async(event_name, owner_name, app_name, custom_headers).value!
    end

    #
    # Event properties.  Up to the first 5 received properties.
    #
    # @param event_name [String] The id of the event
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def event_properties_method_async(event_name, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'event_name is nil' if event_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/properties'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'event_name' => event_name,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::EventProperties.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Count of events by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventCount] operation results.
    #
    def event_count_method(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      response = event_count_method_async(event_name, start, owner_name, app_name, end_parameter, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Count of events by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def event_count_method_with_http_info(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      event_count_method_async(event_name, start, owner_name, app_name, end_parameter, versions, custom_headers).value!
    end

    #
    # Count of events by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def event_count_method_async(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'event_name is nil' if event_name.nil?
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/event_count'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'event_name' => event_name,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::EventCount.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Count of devices for an event by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventDeviceCount] operation results.
    #
    def event_device_count_method(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      response = event_device_count_method_async(event_name, start, owner_name, app_name, end_parameter, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Count of devices for an event by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def event_device_count_method_with_http_info(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      event_device_count_method_async(event_name, start, owner_name, app_name, end_parameter, versions, custom_headers).value!
    end

    #
    # Count of devices for an event by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def event_device_count_method_async(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'event_name is nil' if event_name.nil?
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/device_count'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'event_name' => event_name,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::EventDeviceCount.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Count of events per session by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventCountPerSession] operation results.
    #
    def event_per_session_count(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      response = event_per_session_count_async(event_name, start, owner_name, app_name, end_parameter, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Count of events per session by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def event_per_session_count_with_http_info(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      event_per_session_count_async(event_name, start, owner_name, app_name, end_parameter, versions, custom_headers).value!
    end

    #
    # Count of events per session by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def event_per_session_count_async(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'event_name is nil' if event_name.nil?
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_session'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'event_name' => event_name,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::EventCountPerSession.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Count of events per device by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [EventCountPerDevice] operation results.
    #
    def event_per_device_count(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      response = event_per_device_count_async(event_name, start, owner_name, app_name, end_parameter, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Count of events per device by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def event_per_device_count_with_http_info(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      event_per_device_count_async(event_name, start, owner_name, app_name, end_parameter, versions, custom_headers).value!
    end

    #
    # Count of events per device by interval in the time range.
    #
    # @param event_name [String] The id of the event
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def event_per_device_count_async(event_name, start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'event_name is nil' if event_name.nil?
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}/count_per_device'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'event_name' => event_name,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::EventCountPerDevice.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete the set of Events with the specified event names
    #
    # @param event_name [String] The id of the event
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def events_delete(event_name, owner_name, app_name, custom_headers = nil)
      response = events_delete_async(event_name, owner_name, app_name, custom_headers).value!
      nil
    end

    #
    # Delete the set of Events with the specified event names
    #
    # @param event_name [String] The id of the event
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def events_delete_with_http_info(event_name, owner_name, app_name, custom_headers = nil)
      events_delete_async(event_name, owner_name, app_name, custom_headers).value!
    end

    #
    # Delete the set of Events with the specified event names
    #
    # @param event_name [String] The id of the event
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def events_delete_async(event_name, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'event_name is nil' if event_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/events/{event_name}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'event_name' => event_name,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Count of active events in the time range ordered by event.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param event_name [Array<String>] to select the specific events
    # @param top [Integer] The maximum number of results to return. (0 will fetch
    # all results)
    # @param skip [Integer] The offset (starting at 0) of the first result to
    # return. This parameter along with limit is used to perform pagination.
    # @param inlinecount [Enum] Controls whether or not to include a count of all
    # the items accross all pages. Possible values include: 'allpages', 'none'
    # @param orderby [String] controls the sorting order and sorting based on which
    # column
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Events] operation results.
    #
    def events_method(start, owner_name, app_name, end_parameter = nil, versions = nil, event_name = nil, top = 30, skip = 0, inlinecount = nil, orderby = 'count desc', custom_headers = nil)
      response = events_method_async(start, owner_name, app_name, end_parameter, versions, event_name, top, skip, inlinecount, orderby, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Count of active events in the time range ordered by event.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param event_name [Array<String>] to select the specific events
    # @param top [Integer] The maximum number of results to return. (0 will fetch
    # all results)
    # @param skip [Integer] The offset (starting at 0) of the first result to
    # return. This parameter along with limit is used to perform pagination.
    # @param inlinecount [Enum] Controls whether or not to include a count of all
    # the items accross all pages. Possible values include: 'allpages', 'none'
    # @param orderby [String] controls the sorting order and sorting based on which
    # column
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def events_method_with_http_info(start, owner_name, app_name, end_parameter = nil, versions = nil, event_name = nil, top = 30, skip = 0, inlinecount = nil, orderby = 'count desc', custom_headers = nil)
      events_method_async(start, owner_name, app_name, end_parameter, versions, event_name, top, skip, inlinecount, orderby, custom_headers).value!
    end

    #
    # Count of active events in the time range ordered by event.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param event_name [Array<String>] to select the specific events
    # @param top [Integer] The maximum number of results to return. (0 will fetch
    # all results)
    # @param skip [Integer] The offset (starting at 0) of the first result to
    # return. This parameter along with limit is used to perform pagination.
    # @param inlinecount [Enum] Controls whether or not to include a count of all
    # the items accross all pages. Possible values include: 'allpages', 'none'
    # @param orderby [String] controls the sorting order and sorting based on which
    # column
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def events_method_async(start, owner_name, app_name, end_parameter = nil, versions = nil, event_name = nil, top = 30, skip = 0, inlinecount = nil, orderby = 'count desc', custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/events'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'versions' => versions.nil? ? nil : versions.join('|'),'event_name' => event_name.nil? ? nil : event_name.join('|'),'$top' => top,'$skip' => skip,'$inlinecount' => inlinecount,'$orderby' => orderby},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::Events.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Delete the set of Events with the specified event names
    #
    # @param event_name [String] The id of the event
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def events_delete_logs(event_name, owner_name, app_name, custom_headers = nil)
      response = events_delete_logs_async(event_name, owner_name, app_name, custom_headers).value!
      nil
    end

    #
    # Delete the set of Events with the specified event names
    #
    # @param event_name [String] The id of the event
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def events_delete_logs_with_http_info(event_name, owner_name, app_name, custom_headers = nil)
      events_delete_logs_async(event_name, owner_name, app_name, custom_headers).value!
    end

    #
    # Delete the set of Events with the specified event names
    #
    # @param event_name [String] The id of the event
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def events_delete_logs_async(event_name, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'event_name is nil' if event_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/event_logs/{event_name}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'event_name' => event_name,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Percentage of crash-free device by day in the time range based on the
    # selected versions. Api will return -1 if crash devices is greater than active
    # devices
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CrashFreeDevicePercentages] operation results.
    #
    def crash_free_device_percentages_method(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      response = crash_free_device_percentages_method_async(start, owner_name, app_name, end_parameter, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Percentage of crash-free device by day in the time range based on the
    # selected versions. Api will return -1 if crash devices is greater than active
    # devices
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def crash_free_device_percentages_method_with_http_info(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      crash_free_device_percentages_method_async(start, owner_name, app_name, end_parameter, versions, custom_headers).value!
    end

    #
    # Percentage of crash-free device by day in the time range based on the
    # selected versions. Api will return -1 if crash devices is greater than active
    # devices
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def crash_free_device_percentages_method_async(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/crashfree_device_percentages'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::CrashFreeDevicePercentages.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Overall crashes and affected users count of the selected crash group with
    # selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CrashOverall] operation results.
    #
    def crash_group_totals(crash_group_id, version, owner_name, app_name, custom_headers = nil)
      response = crash_group_totals_async(crash_group_id, version, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Overall crashes and affected users count of the selected crash group with
    # selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def crash_group_totals_with_http_info(crash_group_id, version, owner_name, app_name, custom_headers = nil)
      crash_group_totals_async(crash_group_id, version, owner_name, app_name, custom_headers).value!
    end

    #
    # Overall crashes and affected users count of the selected crash group with
    # selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def crash_group_totals_async(crash_group_id, version, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'crash_group_id is nil' if crash_group_id.nil?
      fail ArgumentError, 'version is nil' if version.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/overall'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'crash_group_id' => crash_group_id,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'version' => version},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::CrashOverall.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # top OSes of the selected crash group with selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param top [Integer] The maximum number of results to return. (0 will fetch
    # all results)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CrashGroupOperatingSystems] operation results.
    #
    def crash_group_operating_system_counts(crash_group_id, version, owner_name, app_name, top = 30, custom_headers = nil)
      response = crash_group_operating_system_counts_async(crash_group_id, version, owner_name, app_name, top, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # top OSes of the selected crash group with selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param top [Integer] The maximum number of results to return. (0 will fetch
    # all results)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def crash_group_operating_system_counts_with_http_info(crash_group_id, version, owner_name, app_name, top = 30, custom_headers = nil)
      crash_group_operating_system_counts_async(crash_group_id, version, owner_name, app_name, top, custom_headers).value!
    end

    #
    # top OSes of the selected crash group with selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param top [Integer] The maximum number of results to return. (0 will fetch
    # all results)
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def crash_group_operating_system_counts_async(crash_group_id, version, owner_name, app_name, top = 30, custom_headers = nil)
      fail ArgumentError, 'crash_group_id is nil' if crash_group_id.nil?
      fail ArgumentError, 'version is nil' if version.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/operating_systems'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'crash_group_id' => crash_group_id,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'version' => version,'$top' => top},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::CrashGroupOperatingSystems.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # top models of the selected crash group with selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param top [Integer] The maximum number of results to return. (0 will fetch
    # all results)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CrashGroupModels] operation results.
    #
    def crash_group_model_counts(crash_group_id, version, owner_name, app_name, top = 30, custom_headers = nil)
      response = crash_group_model_counts_async(crash_group_id, version, owner_name, app_name, top, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # top models of the selected crash group with selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param top [Integer] The maximum number of results to return. (0 will fetch
    # all results)
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def crash_group_model_counts_with_http_info(crash_group_id, version, owner_name, app_name, top = 30, custom_headers = nil)
      crash_group_model_counts_async(crash_group_id, version, owner_name, app_name, top, custom_headers).value!
    end

    #
    # top models of the selected crash group with selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param top [Integer] The maximum number of results to return. (0 will fetch
    # all results)
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def crash_group_model_counts_async(crash_group_id, version, owner_name, app_name, top = 30, custom_headers = nil)
      fail ArgumentError, 'crash_group_id is nil' if crash_group_id.nil?
      fail ArgumentError, 'version is nil' if version.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/models'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'crash_group_id' => crash_group_id,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'version' => version,'$top' => top},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::CrashGroupModels.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Count of crashes by day in the time range of the selected crash group with
    # selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CrashCounts] operation results.
    #
    def crash_group_counts_method(crash_group_id, version, start, owner_name, app_name, end_parameter = nil, custom_headers = nil)
      response = crash_group_counts_method_async(crash_group_id, version, start, owner_name, app_name, end_parameter, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Count of crashes by day in the time range of the selected crash group with
    # selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def crash_group_counts_method_with_http_info(crash_group_id, version, start, owner_name, app_name, end_parameter = nil, custom_headers = nil)
      crash_group_counts_method_async(crash_group_id, version, start, owner_name, app_name, end_parameter, custom_headers).value!
    end

    #
    # Count of crashes by day in the time range of the selected crash group with
    # selected version
    #
    # @param crash_group_id [String] The id of the crash group
    # @param version [String]
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def crash_group_counts_method_async(crash_group_id, version, start, owner_name, app_name, end_parameter = nil, custom_headers = nil)
      fail ArgumentError, 'crash_group_id is nil' if crash_group_id.nil?
      fail ArgumentError, 'version is nil' if version.nil?
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups/{crash_group_id}/crash_counts'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'crash_group_id' => crash_group_id,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'version' => version,'start' => start,'end' => end_parameter},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::CrashCounts.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Overall crashes and affected users count of the selected crash groups with
    # selected versions
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param crash_groups [Array<CrashGroupAndVersion>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def crash_groups_totals(owner_name, app_name, crash_groups, custom_headers = nil)
      response = crash_groups_totals_async(owner_name, app_name, crash_groups, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Overall crashes and affected users count of the selected crash groups with
    # selected versions
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param crash_groups [Array<CrashGroupAndVersion>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def crash_groups_totals_with_http_info(owner_name, app_name, crash_groups, custom_headers = nil)
      crash_groups_totals_async(owner_name, app_name, crash_groups, custom_headers).value!
    end

    #
    # Overall crashes and affected users count of the selected crash groups with
    # selected versions
    #
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param crash_groups [Array<CrashGroupAndVersion>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def crash_groups_totals_async(owner_name, app_name, crash_groups, custom_headers = nil)
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?
      fail ArgumentError, 'crash_groups is nil' if crash_groups.nil?

      crash_groups1 = CrashGroupContainer.new
      unless crash_groups.nil?
        crash_groups1.crash_groups = crash_groups
      end

      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = MobileCenterClient::Models::CrashGroupContainer.mapper()
      request_content = @client.serialize(request_mapper,  crash_groups1, 'crash_groups1')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/crash_groups'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'CrashesOverallItemElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'CrashesOverallItem'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Count of crashes by day in the time range based the selected versions.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [CrashCounts] operation results.
    #
    def crash_counts_method(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      response = crash_counts_method_async(start, owner_name, app_name, end_parameter, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Count of crashes by day in the time range based the selected versions.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def crash_counts_method_with_http_info(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      crash_counts_method_async(start, owner_name, app_name, end_parameter, versions, custom_headers).value!
    end

    #
    # Count of crashes by day in the time range based the selected versions.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def crash_counts_method_async(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/crash_counts'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::CrashCounts.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Count of active devices by interval in the time range.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ActiveDeviceCounts] operation results.
    #
    def device_counts(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      response = device_counts_async(start, owner_name, app_name, end_parameter, versions, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Count of active devices by interval in the time range.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def device_counts_with_http_info(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      device_counts_async(start, owner_name, app_name, end_parameter, versions, custom_headers).value!
    end

    #
    # Count of active devices by interval in the time range.
    #
    # @param start [DateTime] Start date time in data in ISO 8601 date time format
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param end_parameter [DateTime] Last date time in data in ISO 8601 date time
    # format
    # @param versions [Array<String>]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def device_counts_async(start, owner_name, app_name, end_parameter = nil, versions = nil, custom_headers = nil)
      fail ArgumentError, 'start is nil' if start.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/analytics/active_device_counts'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'start' => start,'end' => end_parameter,'versions' => versions.nil? ? nil : versions.join('|')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::ActiveDeviceCounts.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end

# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module MobileCenterClient
  #
  # Microsoft Visual Studio Mobile Center API
  #
  class Distribute

    #
    # Creates and initializes a new instance of the Distribute class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [MobileCenterClient] reference to the MobileCenterClient
    attr_reader :client

    #
    # Registers a user for an existing device
    #
    # @param user_id [String] The ID of the user
    # @param body [DeviceInfoRequest] The device info.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def post_v01users_by_user_id_devices_register(user_id, body, custom_headers = nil)
      response = post_v01users_by_user_id_devices_register_async(user_id, body, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Registers a user for an existing device
    #
    # @param user_id [String] The ID of the user
    # @param body [DeviceInfoRequest] The device info.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_v01users_by_user_id_devices_register_with_http_info(user_id, body, custom_headers = nil)
      post_v01users_by_user_id_devices_register_async(user_id, body, custom_headers).value!
    end

    #
    # Registers a user for an existing device
    #
    # @param user_id [String] The ID of the user
    # @param body [DeviceInfoRequest] The device info.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_v01users_by_user_id_devices_register_async(user_id, body, custom_headers = nil)
      fail ArgumentError, 'user_id is nil' if user_id.nil?
      fail ArgumentError, 'body is nil' if body.nil?


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = MobileCenterClient::Models::DeviceInfoRequest.mapper()
      request_content = @client.serialize(request_mapper,  body, 'body')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v0.1/users/{user_id}/devices/register'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'user_id' => user_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404 || status_code == 500
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::DeviceInfoResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 404
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::ErrorDetails.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 500
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::ErrorDetails.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Serve a .mobileconfig to request a UDID from a device
    #
    # @param original_url [String] The url which should be called after device
    # registration finished
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get_v01devices_register(original_url, custom_headers = nil)
      response = get_v01devices_register_async(original_url, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Serve a .mobileconfig to request a UDID from a device
    #
    # @param original_url [String] The url which should be called after device
    # registration finished
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_v01devices_register_with_http_info(original_url, custom_headers = nil)
      get_v01devices_register_async(original_url, custom_headers).value!
    end

    #
    # Serve a .mobileconfig to request a UDID from a device
    #
    # @param original_url [String] The url which should be called after device
    # registration finished
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_v01devices_register_async(original_url, custom_headers = nil)
      fail ArgumentError, 'original_url is nil' if original_url.nil?


      request_headers = {}
      path_template = 'v0.1/devices/register'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          query_params: {'original_url' => original_url},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 500
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::DeviceConfigurationResponse.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 500
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::ErrorDetails.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns all devices associated with the given distribution group.
    #
    # @param distribution_group_name [String] The name of the distribution group.
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param unprovisioned_only [Boolean] when true, filters out provisioned
    # devices
    # @param udids [Array<String>] multiple UDIDs which should be part of the
    # resulting CSV.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [ErrorDetails] operation results.
    #
    def get_device_list_for_distribution_group(distribution_group_name, owner_name, app_name, unprovisioned_only = false, udids = nil, custom_headers = nil)
      response = get_device_list_for_distribution_group_async(distribution_group_name, owner_name, app_name, unprovisioned_only, udids, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns all devices associated with the given distribution group.
    #
    # @param distribution_group_name [String] The name of the distribution group.
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param unprovisioned_only [Boolean] when true, filters out provisioned
    # devices
    # @param udids [Array<String>] multiple UDIDs which should be part of the
    # resulting CSV.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_device_list_for_distribution_group_with_http_info(distribution_group_name, owner_name, app_name, unprovisioned_only = false, udids = nil, custom_headers = nil)
      get_device_list_for_distribution_group_async(distribution_group_name, owner_name, app_name, unprovisioned_only, udids, custom_headers).value!
    end

    #
    # Returns all devices associated with the given distribution group.
    #
    # @param distribution_group_name [String] The name of the distribution group.
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param unprovisioned_only [Boolean] when true, filters out provisioned
    # devices
    # @param udids [Array<String>] multiple UDIDs which should be part of the
    # resulting CSV.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_device_list_for_distribution_group_async(distribution_group_name, owner_name, app_name, unprovisioned_only = false, udids = nil, custom_headers = nil)
      fail ArgumentError, 'distribution_group_name is nil' if distribution_group_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices/download_devices_list'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'distribution_group_name' => distribution_group_name,'owner_name' => owner_name,'app_name' => app_name},
          query_params: {'unprovisioned_only' => unprovisioned_only,'udids' => udids.nil? ? nil : udids.join(',')},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404 || status_code == 500
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 404
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::ErrorDetails.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 500
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::ErrorDetails.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Returns all devices associated with the given distribution group
    #
    # @param distribution_group_name [String] The name of the distribution group.
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Object] operation results.
    #
    def get_devices_for_distribution_group(distribution_group_name, owner_name, app_name, custom_headers = nil)
      response = get_devices_for_distribution_group_async(distribution_group_name, owner_name, app_name, custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Returns all devices associated with the given distribution group
    #
    # @param distribution_group_name [String] The name of the distribution group.
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_devices_for_distribution_group_with_http_info(distribution_group_name, owner_name, app_name, custom_headers = nil)
      get_devices_for_distribution_group_async(distribution_group_name, owner_name, app_name, custom_headers).value!
    end

    #
    # Returns all devices associated with the given distribution group
    #
    # @param distribution_group_name [String] The name of the distribution group.
    # @param owner_name [String] The name of the owner
    # @param app_name [String] The name of the application
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_devices_for_distribution_group_async(distribution_group_name, owner_name, app_name, custom_headers = nil)
      fail ArgumentError, 'distribution_group_name is nil' if distribution_group_name.nil?
      fail ArgumentError, 'owner_name is nil' if owner_name.nil?
      fail ArgumentError, 'app_name is nil' if app_name.nil?


      request_headers = {}
      path_template = 'v0.1/apps/{owner_name}/{app_name}/distribution_groups/{distribution_group_name}/devices'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'distribution_group_name' => distribution_group_name,'owner_name' => owner_name,'app_name' => app_name},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404 || status_code == 500
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    required: false,
                    serialized_name: 'DeviceInfoResponseElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'DeviceInfoResponse'
                    }
                }
              }
            }
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 404
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::ErrorDetails.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end
        # Deserialize Response
        if status_code == 500
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = MobileCenterClient::Models::ErrorDetails.mapper()
            result.body = @client.deserialize(result_mapper, parsed_response, 'result.body')
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

  end
end

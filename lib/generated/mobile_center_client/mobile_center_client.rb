# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module MobileCenterClient
  #
  # A service client - single point of access to the REST API.
  #
  class MobileCenterClient < MsRest::ServiceClient
    include MsRest::Serialization

    # @return [String] the base URI of the service.
    attr_accessor :base_url

    # @return Subscription credentials which uniquely identify client
    # subscription.
    attr_accessor :credentials

    # @return [Distribute] distribute
    attr_reader :distribute

    # @return [OrgInvitations] org_invitations
    attr_reader :org_invitations

    # @return [DistributionGroupInvitations] distribution_group_invitations
    attr_reader :distribution_group_invitations

    # @return [AppInvitations] app_invitations
    attr_reader :app_invitations

    # @return [Users] users
    attr_reader :users

    # @return [Releases] releases
    attr_reader :releases

    # @return [Apps] apps
    attr_reader :apps

    # @return [Organizations] organizations
    attr_reader :organizations

    # @return [Organization] organization
    attr_reader :organization

    # @return [Builds] builds
    attr_reader :builds

    # @return [Crashes] crashes
    attr_reader :crashes

    # @return [Test] test
    attr_reader :test

    # @return [Symbols] symbols
    attr_reader :symbols

    # @return [MissingSymbolGroups] missing_symbol_groups
    attr_reader :missing_symbol_groups

    # @return [Tables] tables
    attr_reader :tables

    # @return [Azure] azure
    attr_reader :azure

    # @return [Identity] identity
    attr_reader :identity

    # @return [Repositories] repositories
    attr_reader :repositories

    # @return [RepositoryConfigurations] repository_configurations
    attr_reader :repository_configurations

    # @return [ReleaseUploads] release_uploads
    attr_reader :release_uploads

    # @return [DistributionGroups] distribution_groups
    attr_reader :distribution_groups

    # @return [Codepush] codepush
    attr_reader :codepush

    # @return [Commits] commits
    attr_reader :commits

    # @return [BranchConfigurations] branch_configurations
    attr_reader :branch_configurations

    # @return [Analytics] analytics
    attr_reader :analytics

    # @return [Account] account
    attr_reader :account

    #
    # Creates initializes a new instance of the MobileCenterClient class.
    # @param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    # @param base_url [String] the base URI of the service.
    # @param options [Array] filters to be applied to the HTTP requests.
    #
    def initialize(credentials = nil, base_url = nil, options = nil)
      super(credentials, options)
      @base_url = base_url || 'https://api.mobile.azure.com/'

      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials) unless credentials.nil?
      @credentials = credentials

      @distribute = Distribute.new(self)
      @org_invitations = OrgInvitations.new(self)
      @distribution_group_invitations = DistributionGroupInvitations.new(self)
      @app_invitations = AppInvitations.new(self)
      @users = Users.new(self)
      @releases = Releases.new(self)
      @apps = Apps.new(self)
      @organizations = Organizations.new(self)
      @organization = Organization.new(self)
      @builds = Builds.new(self)
      @crashes = Crashes.new(self)
      @test = Test.new(self)
      @symbols = Symbols.new(self)
      @missing_symbol_groups = MissingSymbolGroups.new(self)
      @tables = Tables.new(self)
      @azure = Azure.new(self)
      @identity = Identity.new(self)
      @repositories = Repositories.new(self)
      @repository_configurations = RepositoryConfigurations.new(self)
      @release_uploads = ReleaseUploads.new(self)
      @distribution_groups = DistributionGroups.new(self)
      @codepush = Codepush.new(self)
      @commits = Commits.new(self)
      @branch_configurations = BranchConfigurations.new(self)
      @analytics = Analytics.new(self)
      @account = Account.new(self)
      add_telemetry
    end

    #
    # Makes a request and returns the body of the response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Hash{String=>String}] containing the body of the response.
    # Example:
    #
    #  request_content = "{'location':'westus','tags':{'tag1':'val1','tag2':'val2'}}"
    #  path = "/path"
    #  options = {
    #    body: request_content,
    #    query_params: {'api-version' => '2016-02-01'}
    #  }
    #  result = @client.make_request(:put, path, options)
    #
    def make_request(method, path, options = {})
      result = make_request_with_http_info(method, path, options)
      result.body unless result.nil?
    end

    #
    # Makes a request and returns the operation response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [MsRest::HttpOperationResponse] Operation response containing the request, response and status.
    #
    def make_request_with_http_info(method, path, options = {})
      result = make_request_async(method, path, options).value!
      result.body = result.response.body.to_s.empty? ? nil : JSON.load(result.response.body)
      result
    end

    #
    # Makes a request asynchronously.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def make_request_async(method, path, options = {})
      fail ArgumentError, 'method is nil' if method.nil?
      fail ArgumentError, 'path is nil' if path.nil?

      request_url = options[:base_url] || @base_url

      request_headers = @request_headers
      options.merge!({headers: request_headers.merge(options[:headers] || {})})
      options.merge!({credentials: @credentials}) unless @credentials.nil?

      super(request_url, method, path, options)
    end


    private
    #
    # Adds telemetry information.
    #
    def add_telemetry
        sdk_information = 'mobile_center_client'
        if defined? MobileCenterClient::VERSION
          sdk_information = "#{sdk_information}/#{MobileCenterClient::VERSION}"
        end
        add_user_agent_information(sdk_information)
    end
  end
end
